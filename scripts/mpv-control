#!/bin/sh

# MIT License
#
# Copyright (c) 2025 Alexey Gumirov
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

MPV_SOCKET="/tmp/mpv_socket"
MPV_SOCKET_IN_CONFIG="false"

clean_quotes(){
    printf "%s\n" "${1}" | sed 's#^"##; s#"$##'
}

is_stream_yt(){
    if [ -S "${MPV_SOCKET}" ]; then
        FULL_PATH="$(printf "%s\n" '{ "command": ["get_property", "path"] }' | socat - "${MPV_SOCKET}" | jq -r '.data')"
        if printf "%s\n" "$FULL_PATH" | grep -q 'youtu.be\|youtube'; then
            if printf "%s\n" "$FULL_PATH" | grep -q '^http://\|^https://'; then
                printf "%s" "YOUTUBE"
                exit 0
            fi
        fi
        if printf "%s\n" "$FULL_PATH" | grep -q '^http://\|^https://'; then
            printf "%s" "YES"
            exit 0
        fi
        printf "%s" "NO"
        exit 0
    fi
}

is_pause(){
    if [ -S "${MPV_SOCKET}" ]; then
        PAUSED="$(printf "%s\n" '{ "command": ["get_property", "pause"] }' | socat - "${MPV_SOCKET}" | jq -r '.data')"
        VIDEO_STATUS="$(printf "%s\n" '{ "command": ["get_property", "video"] }' | socat - "${MPV_SOCKET}" | jq -r '.data')"
        if [ "$PAUSED" = "true" ]; then
            if [ "$VIDEO_STATUS" = "false" ]; then
                printf "%s" ""
            else
                printf "%s" "  "
            fi
        else
            if [ "$VIDEO_STATUS" = "false" ]; then
                printf "%s" ""
            else
                printf "%s" " "
            fi
        fi
    fi
}

is_playlist_loop(){
    if [ -S "${MPV_SOCKET}" ]; then
        PL_LOOP_STATUS="$(printf "%s\n" '{ "command": ["get_property", "loop-playlist"] }' | socat - "${MPV_SOCKET}" | jq -r '.data')"
        if [ "$PL_LOOP_STATUS" = "inf" ]; then
            printf "%s" "  "
        else
            printf "%s" ""
        fi
    fi
}

is_file_loop(){
    if [ -S "${MPV_SOCKET}" ]; then
        FILE_LOOP_STATUS="$(printf "%s\n" '{ "command": ["get_property", "loop-file"] }' | socat - "${MPV_SOCKET}" | jq -r '.data')"
        if [ "$FILE_LOOP_STATUS" = "inf" ]; then
            printf "%s" "  "
        else
            printf "%s" ""
        fi
    fi
}

status_line(){
    if [ ! -e "${MPV_SOCKET}" ]; then
        printf "%s" ""
        exit 0
    else
        if [ "$MPV_SOCKET_IN_CONFIG" = "true" ]; then
            if ! pgrep -fa mpv | grep -vq mpv-control; then
                printf "%s" ""
                rm -f "${MPV_SOCKET}"
                exit 0
            fi
        else
            if ! pgrep -fa "${MPV_SOCKET}" >/dev/null; then
                printf "%s" ""
                rm -f "${MPV_SOCKET}"
                exit 0
            fi
        fi
    fi
    METADATA="$(printf "%s\n" '{ "command": ["get_property", "metadata"] }' | socat - "${MPV_SOCKET}" | jq '.data')"
    if [ "$(is_stream_yt)" = "YOUTUBE" ]; then
        UPLOADER_NAME="$(printf "%s" "$METADATA" | jq -r '.["uploader"]')"
        VID_TITLE="$(printf "%s\n" '{ "command": ["get_property", "media-title"] }' | socat - "${MPV_SOCKET}" | jq '.data')"
        if [ ! "$UPLOADER_NAME" = "null" ]; then
            printf " %s %s %s" "$UPLOADER_NAME" "$(is_pause)" "$(clean_quotes "$VID_TITLE" | cut -c1-30)"
            exit 0
        else
            printf " %s %s" "$(is_pause)" "$(clean_quotes "$VID_TITLE" )"
            exit 0
        fi
    fi
    if [ "$(is_stream_yt)" = "YES" ]; then
        RADIO_NAME="$(printf "%s" "$METADATA" | jq -r '.["icy-name"]')"
        RADIO_TITLE="$(printf "%s" "$METADATA" | jq -r '.["icy-title"]' | sed "s#${RADIO_NAME} - ##; s#${RADIO_NAME} | ##; s# - ${RADIO_NAME} - ##")"
        if [ ! "$RADIO_NAME" = "null" ]; then
            printf "󰐻 %s %s%s %s" "$RADIO_NAME" "$(is_pause)" "$(is_file_loop)" "$(clean_quotes "$RADIO_TITLE" | cut -c1-30)"
            exit 0
        else
            printf "󰐻 %s%s %s" "$(is_pause)" "$(is_file_loop)" "$(clean_quotes "$RADIO_TITLE" | cut -c1-30)"
            exit 0
        fi
    fi
    STATUS_STRING=""
    SONG_ALBUM="$(printf "%s\n" "${METADATA}" | jq '.album')"
    if [ ! "$SONG_ALBUM" = "null" ]; then
        STATUS_STRING=" $(is_playlist_loop) $(clean_quotes "${SONG_ALBUM}" | cut -c1-20) "
    fi
    TOTAL_TRACKS="$(printf "%s\n" '{ "command": ["get_property", "playlist-count"] }' | socat - "${MPV_SOCKET}" | jq -r '.data')"
    if [ "$TOTAL_TRACKS" -gt 1 ]; then
        CURRENT_TRACK="$(printf "%s\n" '{ "command": ["get_property", "playlist-pos"] }' | socat - "${MPV_SOCKET}" | jq -r '.data')"
        STATUS_STRING="${STATUS_STRING}[$((CURRENT_TRACK + 1))/${TOTAL_TRACKS}] $(is_pause)$(is_file_loop) "
    else
        STATUS_STRING="${STATUS_STRING}$(is_pause)$(is_file_loop) "
    fi
    PERCENTAGE="$(printf "%s\n" '{ "command": ["get_property", "percent-pos"] }' | socat - "${MPV_SOCKET}" | jq -r '.data' | cut -d'.' -f1)"
    if [ ! "$PERCENTAGE" = "null" ]; then
        STATUS_STRING="${STATUS_STRING}[${PERCENTAGE}󰏰] "
    fi
    SONG_ARTIST="$(printf "%s\n" "${METADATA}" | jq '.artist')"
    if [ ! "$SONG_ARTIST" = "null" ]; then
        STATUS_STRING="${STATUS_STRING}$(clean_quotes "${SONG_ARTIST}") - "
    fi
    SONG_TITLE="$(printf "%s\n" "$METADATA" | jq '.title')"
    if [ "$SONG_TITLE" = "null" ]; then
        SONG_TITLE="$(printf "%s\n" '{ "command": ["get_property", "media-title"] }' | socat - "${MPV_SOCKET}" | jq '.data')"
    fi
    if [ ! "$SONG_TITLE" = "null" ]; then
        STATUS_STRING="${STATUS_STRING}$(clean_quotes "${SONG_TITLE}" | cut -c1-30)"
    fi
    printf "%s" "$STATUS_STRING"
    exit 0
}

case "$1" in
    "-next")
        if [ -S "${MPV_SOCKET}" ]; then
            printf "%s\n" '{ "command" : ["playlist-next"] }' | socat - "${MPV_SOCKET}"
        fi
        ;;
    "-prev")
        if [ -S "${MPV_SOCKET}" ]; then
            printf "%s\n" '{ "command" : ["playlist-prev"] }' | socat - "${MPV_SOCKET}"
        fi
        ;;
    "-playpause")
        if [ -S "${MPV_SOCKET}" ]; then
            printf "%s\n" '{ "command" : ["keypress", "p"] }' | socat - "${MPV_SOCKET}"
        fi
        ;;
    "-shuffle")
        if [ -S "${MPV_SOCKET}" ]; then
            printf "%s\n" '{ "command" : ["playlist-shuffle"] }' | socat - "${MPV_SOCKET}"
        fi
        ;;
    "-quit")
        if [ -S "${MPV_SOCKET}" ]; then
            printf "%s\n" '{ "command" : ["quit"] }' | socat - "${MPV_SOCKET}"
            rm -f "${MPV_SOCKET}"
        fi
        sleep 1
        ;;
    "-seek-forward")
        if [ -S "${MPV_SOCKET}" ]; then
            printf "%s\n" '{ "command": ["seek", "10"] }' | socat - "${MPV_SOCKET}"
        fi
        sleep 1
        ;;
    "-seek-backward")
        if [ -S "${MPV_SOCKET}" ]; then
            printf "%s\n" '{ "command": ["seek", "-10"] }' | socat - "${MPV_SOCKET}"
        fi
        sleep 1
        ;;
    "-loop-file-toggle")
        if [ -S "${MPV_SOCKET}" ]; then
            F_LOOP_STATUS="$(printf "%s\n" '{ "command": ["get_property", "loop-file"] }' | socat - "${MPV_SOCKET}" | jq -r '.data')"
            if [ "$F_LOOP_STATUS" = "inf" ]; then
                printf "%s\n" '{ "command": ["set_property", "loop-file", false] }' | socat - "${MPV_SOCKET}"
            else
                printf "%s\n" '{ "command": ["set_property", "loop-file", true] }' | socat - "${MPV_SOCKET}"
            fi
        fi
        sleep 1
        ;;
    "-loop-playlist-toggle")
        if [ -S "${MPV_SOCKET}" ]; then
            PL_LOOP_STATUS="$(printf "%s\n" '{ "command": ["get_property", "loop-playlist"] }' | socat - "${MPV_SOCKET}" | jq -r '.data')"
            if [ "$PL_LOOP_STATUS" = "inf" ]; then
                printf "%s\n" '{ "command": ["set_property", "loop-playlist", false] }' | socat - "${MPV_SOCKET}"
            else
                printf "%s\n" '{ "command": ["set_property", "loop-playlist", true] }' | socat - "${MPV_SOCKET}"
            fi
        fi
        sleep 1
        ;;
    "-status")
        status_line
        ;;
esac
